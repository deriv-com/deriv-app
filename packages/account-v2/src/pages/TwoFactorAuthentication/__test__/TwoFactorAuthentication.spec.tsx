import React from 'react';
import { Formik } from 'formik';
import {
    APIProvider,
    AuthProvider,
    useIsTwoFactorAuthenticationEnabled,
    useTwoFactorAuthentication,
} from '@deriv/api-v2';
import { render, screen } from '@testing-library/react';
import { TwoFactorAuthentication } from '../TwoFactorAuthentication';

jest.mock('@deriv/api-v2', () => ({
    ...jest.requireActual('@deriv/api-v2'),
    useIsTwoFactorAuthenticationEnabled: jest.fn(),
    useTwoFactorAuthentication: jest.fn(),
}));

jest.mock('@deriv-com/ui', () => ({
    ...jest.requireActual('@deriv-com/ui'),
    useDevice: jest.fn(() => ({ isTablet: false })),
}));

const wrapper = ({ children }: { children: JSX.Element }) => (
    <APIProvider>
        <AuthProvider>{children}</AuthProvider>
    </APIProvider>
);

const renderComponent = () => {
    return render(
        <Formik initialValues={{}} onSubmit={jest.fn()}>
            <TwoFactorAuthentication />
        </Formik>,
        { wrapper }
    );
};

const mockUseTwoFactorAuthentication = useTwoFactorAuthentication as jest.MockedFunction<
    typeof useTwoFactorAuthentication
>;
const mockuseIsTwoFactorAuthenticationEnabled = useIsTwoFactorAuthenticationEnabled as jest.MockedFunction<
    typeof useIsTwoFactorAuthenticationEnabled
>;

describe('TwoFactorAuthentication', () => {
    it('should render the correct component when two factor authentication is enabled', () => {
        (mockuseIsTwoFactorAuthenticationEnabled as jest.Mock).mockReturnValue({
            data: true,
        });
        (mockUseTwoFactorAuthentication as jest.Mock).mockReturnValueOnce({
            error: null,
            isLoading: false,
        });
        renderComponent();
        expect(screen.getByText(/2FA enabled/)).toBeInTheDocument();
    });
    it('should render the correct component when two factor authentication is disabled and the secretKey is defined', () => {
        (mockuseIsTwoFactorAuthenticationEnabled as jest.Mock).mockReturnValue({
            data: false,
        });
        (mockUseTwoFactorAuthentication as jest.Mock).mockReturnValue({
            data: { secretKey: 'secret' },
            error: null,
            isLoading: false,
            mutate: jest.fn(),
        });
        renderComponent();
        expect(screen.getByText(/Enter the authentication code generated by your 2FA app:/)).toBeInTheDocument();
        expect(
            screen.getByText(/If you are unable to scan the QR code, you can manually enter this code instead:/)
        ).toBeInTheDocument();
    });
    it('should render the correct component when two factor authentication is disabled and the secretKey is undefined', () => {
        (mockuseIsTwoFactorAuthenticationEnabled as jest.Mock).mockReturnValue({
            data: false,
        });
        (mockUseTwoFactorAuthentication as jest.Mock).mockReturnValue({
            error: null,
            isLoading: false,
            mutate: jest.fn(),
        });
        renderComponent();
        expect(screen.getByText(/Enter the authentication code generated by your 2FA app:/)).toBeInTheDocument();
        expect(
            screen.queryByText(/If you are unable to scan the QR code, you can manually enter this code instead:/)
        ).not.toBeInTheDocument();
    });
    it('should render the loader when data is undefined and isLoading is true', () => {
        (mockuseIsTwoFactorAuthenticationEnabled as jest.Mock).mockReturnValue({
            data: undefined,
            isLoading: true,
        });
        renderComponent();
        expect(screen.getByTestId('dt_derivs-loader')).toBeInTheDocument();
    });
});
